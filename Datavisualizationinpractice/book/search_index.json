[
["functional.html", "Chapter 2 Functional approach 2.1 Distribution 2.2 Composition 2.3 Comparison 2.4 Relationship", " Chapter 2 Functional approach In this module, we will emphasize on hands-on applications, including building visual vocabulary, deciding chart types by function and data types and building charts using sample programs. Starter: What to plot and How 2.1 Distribution 2.1.1 Univariate 2.1.1.1 Histogram The following example demonstrates creation of a histogram using four packages. The package vroom is the most convenient tool for importing data in text form. Other packages can also be used for importing data from other software applications. For instance, the packages haven can import SPSS, SAS and Stata data files. There are multiple packages that can import Excel files. The default is the package *readxl**. The package janitor is responsible for doing the cleaning jobs such as messy variable (e.g. with space embedded names) and the package RColorBrewer provides great choices of palettes and colors by names (e.g. steelblue). library(vroom) library(janitor) library(ggplot2) library(RColorBrewer) hpi2016=vroom::vroom(&quot;https://raw.githubusercontent.com/datageneration/datavisualizationinpractice/main/data/happyplanetindex.csv&quot;, .name_repair = janitor::make_clean_names) ggplot(hpi2016) + aes(x = happy_planet_index) + geom_histogram(bins = 9, fill = &quot;steelblue&quot;, color = &quot;lightgrey&quot;, alpha =0.7) + labs(title = &quot;Happy Planet Index&quot;, subtitle = &quot;2016&quot;, caption = &quot;Source: https://happyplanetindex.org&quot;, x=&quot;Happy Planet Index&quot;,y=&quot;Count&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), text=element_text(size=14,family=&quot;Palatino&quot;)) Alternatively, the histogram can be built with tick marks between each bin using geom_bar: ggplot(hpi2016) + aes(x = happy_planet_index) + geom_bar(fill = &quot;steelblue&quot;, alpha =0.7) + scale_x_binned() + labs(title = &quot;Happy Planet Index&quot;, subtitle = &quot;2016&quot;, caption = &quot;Source: https://happyplanetindex.org&quot;, x=&quot;Happy Planet Index&quot;,y=&quot;Count&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), text=element_text(size=14,family=&quot;Palatino&quot;)) For a line histogram, geom_freqpoly() can be used: ggplot(hpi2016) + aes(x = happy_planet_index) + geom_freqpoly(bins = 10) + labs(title = &quot;Happy Planet Index&quot;, subtitle = &quot;2016&quot;, caption = &quot;https://happyplanetindex.org&quot;, x=&quot;Happy Planet Index&quot;,y=&quot;Count&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), text=element_text(size=14,family=&quot;Palatino&quot;)) 2.1.1.2 Bivariate/Multivariate With more than one variables, there are many choices for distribution charts. This example illustrates the faceted scatterplot. library(gapminder) gm=gapminder ggplot(gm) + aes(x = gdpPercap, y = lifeExp, colour = continent) + geom_point(size = 0.5) + scale_x_continuous(trans = &quot;log10&quot;, labels = scales::comma) + theme_bw() + facet_wrap(vars(continent)) + labs(title=&quot;Life Expectacy and GDP Per Capita (logged)&quot;, x=&quot;GDP Per Capita&quot;,y=&quot;Life Expectancy&quot;, caption=&quot;Source: Gapminder.org&quot;) + theme(plot.title = element_text(hjust = 0.5), text=element_text(size=12,family=&quot;Palatino&quot;), legend.position=c(.9,.2)) 2.2 Composition 2.2.1 Stack histogram ggplot(hpi2016) + aes(x = happy_planet_index, fill = region) + geom_histogram(bins = 30L) + scale_fill_brewer(palette = &quot;Set2&quot;) + theme_bw() + labs(title = &quot;Happy Planet Index&quot;, subtitle = &quot;2016&quot;, caption = &quot;https://happyplanetindex.org&quot;, x=&quot;Happy Planet Index&quot;,y=&quot;Count&quot;) + theme_bw() + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), text=element_text(size=14,family=&quot;Palatino&quot;), legend.position = &quot;bottom&quot;) 2.3 Comparison 2.3.1 Bar charts # Import the TEDS 2016 data in Stata format using the haven package # install.packages(&quot;haven&quot;) library(tidyverse) library(haven) TEDS_2016 &lt;- read_stata(&quot;https://github.com/datageneration/home/blob/master/DataProgramming/data/TEDS_2016.dta?raw=true&quot;) # Prepare the analyze the Party ID variable # Assign label to the values (1=KMT, 2=DPP, 3=NP, 4=PFP, 5=TSU, 6=NPP, 7=&quot;NA&quot;) TEDS_2016$PartyID &lt;- factor(TEDS_2016$PartyID, labels=c(&quot;KMT&quot;,&quot;DPP&quot;,&quot;NP&quot;,&quot;PFP&quot;, &quot;TSU&quot;, &quot;NPP&quot;,&quot;NA&quot;)) # Run a frequency table of the Party ID variable using the descr package # install.packages(&quot;descr&quot;) library(descr) freq(TEDS_2016$PartyID) ## TEDS_2016$PartyID ## Frequency Percent ## KMT 388 22.9586 ## DPP 591 34.9704 ## NP 3 0.1775 ## PFP 32 1.8935 ## TSU 5 0.2959 ## NPP 43 2.5444 ## NA 628 37.1598 ## Total 1690 100.0000 # Plot the Party ID variable ggplot(TEDS_2016, aes(PartyID)) + geom_bar() # Better plot with colors # Apply percentages instead of counts ggplot(TEDS_2016, aes(PartyID)) + geom_bar(aes(y = (..count..)/sum(..count..),fill=PartyID)) + scale_y_continuous(labels=scales::percent) + ylab(&quot;Party Support (%)&quot;) + xlab(&quot;Taiwan Political Parties&quot;) + theme_bw() # Sort the distribution with party colors TEDS_2016 %&gt;% count(PartyID) %&gt;% mutate(perc = n / nrow(TEDS_2016)) -&gt; T2 ggplot(T2, aes(x = reorder(PartyID, -perc),y = perc,fill=PartyID)) + geom_bar(stat = &quot;identity&quot;) + labs(title=&quot;Party Support in Taiwan&quot;, subtitle = &quot;2016&quot;, x=&quot;Taiwan Political Parties&quot;,y=&quot;Party Support (%)&quot;, caption=&quot;Source: Taiwan Election and Democratization Study&quot;) + theme_bw() + scale_fill_manual(values=c(&quot;steel blue&quot;,&quot;forestgreen&quot;,&quot;khaki1&quot;,&quot;orange&quot;,&quot;goldenrod&quot;,&quot;yellow&quot;,&quot;grey&quot;)) + theme(plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5), text=element_text(size=12,family=&quot;Palatino&quot;)) ### Time series 2.3.1.1 Stock chart using package quantmod # install.packages(&quot;quantmod&quot;) library(quantmod) quantmod::getSymbols(&quot;TWTR&quot;, src=&quot;yahoo&quot;) ## [1] &quot;TWTR&quot; chartSeries(TWTR) chartSeries(TWTR, type = c(&quot;auto&quot;, &quot;candlesticks&quot;, &quot;matchsticks&quot;, &quot;bars&quot;,&quot;line&quot;), subset=&#39;last 4 months&#39;,theme = &quot;white&quot;) barChart(TWTR,multi.col=TRUE,theme = &#39;white&#39;) lineChart(TWTR,line.type = &#39;l&#39;, theme = &#39;white&#39;) # line, choices include l, h, c, b lineChart(TWTR,line.type = &#39;h&#39;,theme = chartTheme(&#39;white&#39;, up.col=&#39;steelblue&#39;)) # histogram candleChart(TWTR,subset = &quot;2020-11/2021-01&quot;, multi.col=TRUE,theme = chartTheme(&#39;white&#39;)) ## grey =&gt; Open[t] &lt; Close[t] and Op[t] &lt; Cl[t-1] ## white =&gt; Op[t] &lt; Cl[t] and Op[t] &gt; Cl[t-1] ## red =&gt; Op[t] &gt; Cl[t] and Op[t] &lt; Cl[t-1] ## black =&gt; Op[t] &gt; Cl[t] and Op[t] &gt; Cl[t-1] 2.3.1.2 Plotting multiple time series: stock prices # Plotting time series (stock example) # install.packages(c(&quot;quantmod&quot;, &quot;ggplot2&quot;, &quot;magrittr&quot;,&quot;broom&quot;)) # lapply(c(&quot;quantmod&quot;, &quot;ggplot2&quot;, &quot;magrittr&quot;,&quot;broom&quot;), require, character.only = TRUE) library(quantmod) library(ggplot2) library(magrittr) library(broom) ## Plotting multiple series using ggplot2 # Setting time period start = as.Date(&quot;2020-10-01&quot;) end = as.Date(&quot;2021-01-12&quot;) # Collect stock names from Yahoo Finance getSymbols(c(&quot;AAPL&quot;, &quot;FB&quot;, &quot;TSM&quot;), src = &quot;yahoo&quot;, from = start, to = end) ## [1] &quot;AAPL&quot; &quot;FB&quot; &quot;TSM&quot; # Prepare data as xts (time series object) stocks = as.xts(data.frame(AAPL = AAPL[, &quot;AAPL.Adjusted&quot;], FB = FB[, &quot;FB.Adjusted&quot;], TSM = TSM[, &quot;TSM.Adjusted&quot;])) # Index by date names(stocks) = c(&quot;Apple&quot;, &quot;Facebook&quot;, &quot;Taiwan Semiconductor Manu.&quot;) index(stocks) = as.Date(index(stocks)) # Plot stocks_series = tidy(stocks) %&gt;% ggplot(aes(x=index,y=value, color=series)) + geom_line(cex=1) + theme_bw() stocks_series stocks_series = tidy(stocks) %&gt;% ggplot(aes(x=index,y=value, color=series)) + geom_line(cex=1) + theme_bw() + labs(title = &quot;Daily Stock Prices, 10/1/2020 - 11/10/2020&quot;, subtitle = &quot;End of Day Adjusted Prices&quot;, caption = &quot;Source: Yahoo Finance&quot;) + xlab(&quot;Date&quot;) + ylab(&quot;Price&quot;) + scale_color_manual(values = c(&quot;steelblue&quot;, &quot;red&quot;,&quot;purple&quot;)) + theme(text = element_text(family = &quot;Apple Garamond&quot;), plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) + theme(legend.position=&quot;top&quot;) stocks_series 2.4 Relationship library(gapminder) gm=gapminder ggplot(gm) + aes(x = gdpPercap, y = lifeExp, colour = continent) + geom_point(size = 0.5) + geom_smooth(span = 0.75) + scale_x_continuous(trans = &quot;log10&quot;, labels = scales::comma) + theme_bw() + facet_wrap(vars(continent)) + labs(title=&quot;Life Expectacy and GDP Per Capita (logged)&quot;, x=&quot;GDP Per Capita&quot;,y=&quot;Life Expectancy&quot;, caption=&quot;Source: Gapminder.org&quot;) + theme(plot.title = element_text(hjust = 0.5), text=element_text(size=12,family=&quot;Palatino&quot;), legend.position=c(.9,.2)) "]
]
