[
["interactive.html", "Chapter 3 Interactive Charts 3.1 ggiraph package 3.2 Interactive scatterplot 3.3 Leaflet for interactive map 3.4 Plotly 3.5 Shiny", " Chapter 3 Interactive Charts This module covers building interactive and reactive data visualization for web publication. 3.1 ggiraph package # Creating Interactive charts using ggplot2 and ggiraph # Boxplot, Scatterplot ## Install packages #install.packages(c(&quot;vroom&quot;, &quot;janitor&quot;, &quot;tidyverse&quot;, &quot;gapminder&quot;,&quot;ggiraph&quot;)) invisible(lapply(c(&quot;vroom&quot;, &quot;janitor&quot;, &quot;tidyverse&quot;, &quot;gapminder&quot;, &quot;ggiraph&quot;), require, character.only = TRUE)) ## Import data hpi2016 = vroom::vroom(&quot;https://raw.githubusercontent.com/datageneration/datavisualizationinpractice/main/data/happyplanetindex.csv&quot;, .name_repair = janitor::make_clean_names) gm = gapminder ## Boxplot p &lt;- ggplot(hpi2016, aes(x = region, y = happy_planet_index, tooltip = region)) + geom_boxplot_interactive() x &lt;- girafe(ggobj = p) if( interactive() ) { print(x) } ggiraph Boxplot2 p &lt;- ggplot(hpi2016, aes(x = region, y = happy_planet_index, tooltip = region, fill = region, data_id=region)) + geom_boxplot_interactive(outlier.colour = &quot;red&quot;) + guides(fill = &quot;none&quot;) + theme_bw() xx &lt;- girafe(ggobj = p) if( interactive() ) print(xx) ggiraph Boxplot2 ## Scatter plot p &lt;- ggplot(gm, aes(x = continent, y = lifeExp, tooltip = year)) + geom_boxplot_interactive() x &lt;- girafe(ggobj = p) if( interactive() ) print(x) p &lt;- ggplot(gm, aes(x = continent, y = lifeExp, tooltip = continent, fill = continent,)) + geom_boxplot_interactive(outlier.color = &quot;green&quot;) + theme_bw() x &lt;- girafe(ggobj = p) if( interactive() ) print(x) 3.2 Interactive scatterplot ## ggiraph cannot allow single quote in tooltip variable gm$country=as.character(gm$country) gm$country[gm$country == &quot;Cote d&#39;Ivoire&quot;] &lt;- &quot;Cote dIvoire&quot; life &lt;- ggplot(gm, aes(x = gdpPercap, y = lifeExp, color = continent, tooltip = country, data_id = country)) + scale_x_log10(labels = scales::comma) + geom_point_interactive(size = .2) + labs(title=&quot;Life Expectancy and GDP by continent&quot;, subtitle=&quot;1952 - 2007&quot;, caption=&quot;Source: Gapminder&quot;, x=&quot;GDP per capita&quot;, y=&quot;Life Expectancy&quot;) + facet_wrap(~ year) + theme_bw() + theme(text=element_text(family=&quot;Palatino&quot;), axis.text = element_text(size=8), plot.title = element_text(size=16,hjust = 0.5), plot.subtitle = element_text(size=12,hjust = 0.5), legend.position = &quot;bottom&quot;) x &lt;- girafe(ggobj = life) if( interactive() ) print(x) ggiraph Boxplot2 ## Select one year data (1972) life &lt;- ggplot(subset(gm, year %in% c(&quot;1972&quot;)), aes(x = gdpPercap, y = lifeExp, color = continent, tooltip = country, data_id = country)) + scale_x_log10(labels = scales::comma) + geom_point_interactive(size = .5) + labs(title=&quot;Life Expectancy and GDP by continent&quot;, subtitle=&quot;&quot;, caption=&quot;Source: Gapminder&quot;, x=&quot;GDP per capita&quot;, y=&quot;Life Expectancy&quot;) + facet_wrap(~ year) + theme_bw() + theme(text=element_text(family=&quot;Palatino&quot;), axis.text = element_text(size=8), plot.title = element_text(size=16,hjust = 0.5), plot.subtitle = element_text(size=12,hjust = 0.5), legend.position = &quot;bottom&quot;) x &lt;- girafe(ggobj = life) if( interactive() ) print(x) 3.3 Leaflet for interactive map # install.packages(c(&quot;maps&quot;,&quot;leaflet&quot;,&quot;htmlwidgets&quot;)) # Simple map of US states library(&quot;leaflet&quot;) library(&quot;maps&quot;) mapStates = map(&quot;state&quot;, fill = TRUE, plot = FALSE) leaflet(data = mapStates) %&gt;% addTiles() %&gt;% addPolygons(fillColor = topo.colors(10, alpha = .5), stroke = FALSE) This example illustrates generating an interactive leaflet map with location marker. # Create a map with location (Karl Ho at UTD EPPS) # Create object using leaflet setting the view at EPPS geo location) eppsmap &lt;- leaflet() %&gt;% setView(-96.7478372, 32.9886268, zoom=14) # Create object to acquire map data from ESRI esri &lt;- grep(&quot;^Esri&quot;, providers, value = TRUE) for (provider in esri) { eppsmap &lt;- eppsmap %&gt;% addProviderTiles(provider, group = provider) } find_me_at &lt;- paste(sep = &quot;&lt;br/&gt;&quot;, &quot;&lt;b&gt;&lt;a href=&#39;http://karlho.com&#39; target=&#39;_blank&#39;&gt;Karl Ho &lt;/a&gt;&lt;/b&gt;&quot;, &quot;&lt;b&gt;&lt;a href=&#39;http://epps.utdallas.edu&#39; target=&#39;_blank&#39;&gt;School of Economic, &lt;/a&gt;&lt;/b&gt;&quot;, &quot;&lt;b&gt;&lt;a href=&#39;http://epps.utdallas.edu&#39; target=&#39;_blank&#39;&gt;Political and Policy Sciences&lt;/a&gt;&lt;/b&gt;&quot;, &quot;&lt;b&gt;&lt;a href=&#39;http://www.utdallas.edu&#39; target=&#39;_blank&#39;&gt;University of Texsa at Dallas&lt;/a&gt;&lt;/b&gt;&quot;, &quot;800 West Campbell Road, GR31&quot;, &quot;Richardson TX 75080&quot; ) # Use htmlwidget::onRender function to add custom behavior to the leaflet map using native JavaScript. eppsmap %&gt;% addLayersControl(baseGroups = names(esri), options = layersControlOptions(collapsed = TRUE)) %&gt;% addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE, position = &quot;bottomright&quot;) %&gt;% addMarkers(eppsmap, lng=-96.7478372, lat=32.9886268, popup=find_me_at) %&gt;% htmlwidgets::onRender(&quot; function(el, x) { var myMap = this; myMap.on(&#39;baselayerchange&#39;, function (e) { myMap.minimap.changeLayer(L.tileLayer.provider(e.name)); }) }&quot;) 3.4 Plotly ## Introduction to Plotly sample program 1 ## file: introPlotly01.R # Packages: plotly install.packages(&quot;plotly&quot;) ## Installing plotly [4.9.3] ... ## OK [linked cache] install.packages(&quot;tidyverse&quot;) ## Installing tidyverse [1.3.0] ... ## OK [linked cache] # load the plotly R package require(plotly) library(plotly) require(&quot;readr&quot;) library(readr) library(tidyverse) # load the diamonds dataset from the ggplot2 package data(diamonds, package = &quot;ggplot2&quot;) # create three visualizations of the diamonds dataset plot_ly(diamonds, x = ~cut) plot_ly(diamonds, x = ~cut, y = ~clarity) plot_ly(diamonds, x = ~cut, color = ~clarity, colors = &quot;Accent&quot;) hkid &lt;- read_csv(&quot;https://raw.githubusercontent.com/kho777/data-visualization/master/data/hkid.csv&quot;) CO2 &lt;- read_csv(&quot;http://raw.githubusercontent.com/kho777/data-visualization/master/data/CO2.csv&quot;) hpi2016 &lt;- read_csv(&quot;http://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016.csv&quot;) rename(hpi2016, c(&quot;GDPC&quot;=&quot;GDPPC&quot;)) ## # A tibble: 140 x 11 ## Region AverageLifeExpe… AverageWellbeing HappyLifeYears Footprint ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Middl… 59.7 3.8 12.4 0.8 ## 2 Post-… 77.3 5.5 34.4 2.2 ## 3 Middl… 74.3 5.6 30.5 2.1 ## 4 Ameri… 75.9 6.5 40.2 3.1 ## 5 Post-… 74.4 4.3 24 2.2 ## 6 Asia … 82.1 7.2 53.1 9.3 ## 7 Europe 81 7.4 54.4 6.1 ## 8 Asia … 70.8 4.7 23.3 0.7 ## 9 Post-… 70.9 5.7 34 5.1 ## 10 Europe 80.4 6.9 49.5 7.4 ## # … with 130 more rows, and 6 more variables: InequalityofOutcomes &lt;chr&gt;, ## # `Inequality-adjustedLifeExpectancy` &lt;dbl&gt;, ## # `Inequality-adjustedWellbeing` &lt;dbl&gt;, HappyPlanetIndex &lt;dbl&gt;, GDPC &lt;chr&gt;, ## # Population &lt;dbl&gt; plot_ly(hkid, x = ~Hongkonger) plot_ly(hpi2016, x = ~GDPPC, y = ~HappyPlanetIndex) # plot_ly(hpi2016, x = ~GDPPC, y = ~HappyPlanetIndex, z= ~hpi2016$AverageLifeExpectancy, type = &quot;surface&quot;) add_lines(plot_ly(hpi2016, x = ~GDPPC, y = ~HappyPlanetIndex)) plot_ly(CO2, x = ~CO2pc) plot_ly(diamonds, x = ~carat, y = ~price, z = ~depth, size=.2) plot_ly(diamonds, x = ~cut, color = ~clarity, colors = &quot;Accent&quot;) # add_bars(), add_lines(), add_heatmap(), add_boxplot() hpi2016 %&gt;% plot_ly(x = ~GDPPC, y = ~HappyPlanetIndex) %&gt;% add_bars() hpi2016 %&gt;% plot_ly(x = ~GDPPC, y = ~HappyPlanetIndex, z = ~AverageLifeExpectancy) %&gt;% add_heatmap(inherit = TRUE) # hpi2016 %&gt;% plot_ly(x = ~GDPPC, y = ~HappyPlanetIndex, z = ~HappyLifeYears) %&gt;% add_histogram2dcontour() hpi2016 %&gt;% plot_ly(x = ~Region, y = ~HappyPlanetIndex) %&gt;% add_boxplot() 3.5 Shiny 3.5.1 What is Shiny? A Shiny app is a web page (UI) with user interface connected to a computer running a live R session (Server). Developers can design the UI, which provides interactive interface for users to visualize data (by running R code). Shiny app = R + Interactivity + Web hosting To start with, there are two basic components for building a Shiny app: server.R and ui.R, with which the former controls the data and visualization processes and user interfaces in latter. To develop and deploy a Shiny app, programmer can design and program in RStudio but needs to publish to a Shiny server. RStudio provides free access for limited publishing. Developers can sign up a Shinyapps.io account at https://www.shinyapps.io with GitHub or Google account. The followinig provides a few sample programs to get start with Shiny app developments. ## Introduction to R Shiny sample program 1 ## file: introShiny01.R ## Adapted from Beeley, Chris and Shitalkumar R. Sukhdeve, 2018. Web application development ## with R using Shiny (3rd ed.) Packt Publishing Ltd. ## Also, https://shiny.rstudio.com # Packages: shiny # Formatting page using tags install.packages(&quot;shiny&quot;) library(shiny) # First component: User interface (ui) ui &lt;- fluidPage ( tags$h1(&quot;Data Visualization App&quot;), tags$img(src = &quot;https://karlho.com/img/KarlHoPic100.png&quot;), # tags$hr(), # tags$br(), tags$h1(strong(&quot;Karl Ho&quot;)), tags$p(em(&quot;School of Economic, Political and Policy Sciences&quot;)), tags$p(em(&quot;University of Texas at Dallas&quot;)), tags$a(href=&quot;https://karlho.com&quot;, &quot;Karl Ho website&quot;)) # Second component: server server &lt;- function(input , output){} # Calling the shinyapp shinyApp(ui = ui , server = server) ## Introduction to R Shiny sample program 2 ## file: IntroShiny02.R ## Adapted from Beeley, Chris and Shitalkumar R. Sukhdeve, 2018. Web application development ## with R using Shiny (3rd ed.) Packt Publishing Ltd. ## Also, https://shiny.rstudio.com # Packages: readr, shiny # This example demonstrates a core feature of Shiny: **reactivity**. # In the `server` function, a reactive called `datasetInput` is declared. # Notice that the reactive expression depends on the input expression `input$dataset`, # and that it&#39;s used by two output expressions: `output$summary` and `output$view`. # Try changing the dataset (using *Choose a dataset*) while looking at the reactive and then at the outputs; # you will see first the reactive and then its dependencies flash. # Notice also that the reactive expression doesn&#39;t just update whenever anything changes--only the inputs it depends on will trigger an update. # Change the &quot;Caption&quot; field and notice how only the `output$caption` expression is re-evaluated; the reactive and its dependents are left alone. require(&quot;readr&quot;) require(&quot;shiny&quot;) # Loading datasets hkid &lt;- read_csv(&quot;https://raw.githubusercontent.com/kho777/data-visualization/master/data/hkid.csv&quot;) CO2 &lt;- read_csv(&quot;http://raw.githubusercontent.com/kho777/data-visualization/master/data/CO2.csv&quot;) hpi2016 &lt;- read_csv(&quot;http://raw.githubusercontent.com/kho777/data-visualization/master/data/hpi2016.csv&quot;) # Define UI for dataset viewer app ---- ui &lt;- fluidPage( # App title ---- titlePanel(&quot;Karl Ho Datasets&quot;), # Sidebar layout with input and output definitions ---- sidebarLayout( # Sidebar panel for inputs ---- sidebarPanel( # Input: Text for providing a caption ---- # Note: Changes made to the caption in the textInput control # are updated in the output area immediately as you type textInput(inputId = &quot;caption&quot;, label = &quot;Caption:&quot;, value = &quot;Datasets&quot;), # Input: Selector for choosing dataset ---- selectInput(inputId = &quot;dataset&quot;, label = &quot;Choose a dataset:&quot;, choices = c(&quot;Hong Kong Identity&quot;, &quot;HPI 2016&quot;,&quot;CO2 emissions&quot;)), # Input: Numeric entry for number of obs to view ---- numericInput(inputId = &quot;obs&quot;, label = &quot;Number of observations to view:&quot;, min=0, value = 10) ), # Main panel for displaying outputs ---- mainPanel( # Output: Formatted text for caption ---- h3(textOutput(&quot;caption&quot;, container = span)), # Output: Verbatim text for data summary ---- verbatimTextOutput(&quot;summary&quot;), # Output: HTML table with requested number of observations ---- tableOutput(&quot;view&quot;) ) ) ) # Define server logic to summarize and view selected dataset ---- server &lt;- function(input, output) { # Return the requested dataset ---- # By declaring datasetInput as a reactive expression we ensure # that: # # 1. It is only called when the inputs it depends on changes # 2. The computation and result are shared by all the callers, # i.e. it only executes a single time datasetInput &lt;- reactive({ switch(input$dataset, &quot;Hong Kong Identity&quot; =hkid, &quot;HPI 2016&quot;=hpi2016, &quot;CO2 emissions&quot;=CO2) }) # Create caption ---- # The output$caption is computed based on a reactive expression # that returns input$caption. When the user changes the # &quot;caption&quot; field: # # 1. This function is automatically called to recompute the output # 2. New caption is pushed back to the browser for re-display # # Note that because the data-oriented reactive expressions # below don&#39;t depend on input$caption, those expressions are # NOT called when input$caption changes output$caption &lt;- renderText({ input$caption }) # Generate a summary of the dataset ---- # The output$summary depends on the datasetInput reactive # expression, so will be re-executed whenever datasetInput is # invalidated, i.e. whenever the input$dataset changes output$summary &lt;- renderPrint({ dataset &lt;- datasetInput() summary(dataset) }) # Show the first &quot;n&quot; observations ---- # The output$view depends on both the databaseInput reactive # expression and input$obs, so it will be re-executed whenever # input$dataset or input$obs is changed output$view &lt;- renderTable({ head(datasetInput(), n = input$obs) }) } # Create Shiny app ---- shinyApp(ui, server) 3.5.2 Creating dashboard using ggiraph and Shiny Server.R ## Simple Shiny and ggiraph example: 2020 presidential election count by selected states ## Adapted from ggiraph example by David Gohel (https://davidgohel.github.io/ggiraph/articles/offcran/shiny.html) ## install.packages(c(&quot;ggplot2&quot;, &quot;ggiraph&quot;, &quot;dplyr&quot;, &quot;RColorBrewer&quot;)) library(ggplot2) library(ggiraph) library(dplyr) library(RColorBrewer) source(&quot;stateHandler.R&quot;) options(shiny.trace = TRUE) dat &lt;- data.frame( state = c(&quot;Wisconsin&quot;, &quot;Wisconsin&quot;, &quot;Michigan&quot;, &quot;Michigan&quot;, &quot;Pennsylvania&quot;, &quot;Pennsylvania&quot;, &quot;Georgia&quot;, &quot;Georgia&quot;, &quot;Arizona&quot;, &quot;Arizona&quot;), candidate = c(&quot;Biden&quot;, &quot;Trump&quot;, &quot;Biden&quot;, &quot;Trump&quot;, &quot;Biden&quot;, &quot;Trump&quot;, &quot;Biden&quot;, &quot;Trump&quot;, &quot;Biden&quot;, &quot;Trump&quot;), percent = c(49.6, 48.9, 50.6, 47.8, 50, 48.8, 49.5, 49.3, 49.4, 49.1) ) p &lt;- ggplot(dat, aes( x = state, y = percent, fill = candidate, data_id = state, tooltip = percent )) + labs(title = &quot;US Presidential election&quot;, subtitle = &quot;Vote percentage by selected states&quot;) + geom_bar_interactive(position=&quot;dodge&quot;, stat = &quot;identity&quot;) + scale_fill_manual_interactive( name = label_interactive(&quot;candidate&quot;, tooltip = &quot;Candidate&quot;, data_id = &quot;legend.title&quot;), values = c(Biden = &quot;steelblue1&quot;, Trump = &quot;tomato&quot;), data_id = function(breaks) { as.character(breaks) }, tooltip = function(breaks) { as.character(breaks) }, labels = function(breaks) { lapply(breaks, function(br) { label_interactive(as.character(br), data_id = as.character(br), tooltip = as.character(br)) }) } ) + theme_bw() + theme(text=element_text(family=&quot;Palatino&quot;), plot.title = element_text_interactive(tooltip = &quot;Title&quot;, data_id = &quot;title&quot;, hjust=0.5), plot.subtitle = element_text_interactive(tooltip = &quot;Subitle&quot;, data_id = &quot;subtitle&quot;, hjust=0.5), ) shinyServer(function(input, output, session) { output$plot &lt;- renderGirafe({ x &lt;- girafe(ggobj = p, width_svg = 6, height_svg = 8) x &lt;- girafe_options( x, opts_selection(type = input$opt_selected_data), opts_hover(reactive = input$opt_hover_data), opts_selection_key( type = input$opt_selected_key, css = girafe_css(&quot;stroke:red; stroke-width:2px&quot;, text = &quot;stroke:none;fill:red;font-size:12px&quot;) ), opts_hover_key( css = girafe_css(&quot;stroke:red&quot;, text = &quot;stroke:none;fill:red&quot;), reactive = input$opt_hover_key ), opts_selection_theme(type = input$opt_selected_theme), opts_hover_theme(reactive = input$opt_hover_theme), opts_hover_inv(css = if (input$hover_inv == TRUE) &quot;opacity:0.3&quot; else &quot;&quot;) ) x }) output$checkboxes &lt;- renderUI({ result &lt;- list() if (input$opt_selected_data == &quot;multiple&quot; || input$opt_selected_data == &quot;single&quot;) { result[[length(result) + 1]] &lt;- StateHandlerUI( &#39;selected_data&#39;, label = &quot;Selected data elements:&quot;, choices = list(&quot;Wisconsin&quot;, &quot;Michigan&quot;, &quot;Pennsylvania&quot;, &quot;Arizona&quot;, &quot;Georgia&quot;) ) } if (input$opt_hover_data == TRUE) { result[[length(result) + 1]] &lt;- StateHandlerUI( &quot;hovered_data&quot;, label = &quot;Hovered data elements:&quot;, choices = list(&quot;Wisconsin&quot;, &quot;Michigan&quot;, &quot;Pennsylvania&quot;, &quot;Arizona&quot;, &quot;Georgia&quot;) ) } if (input$opt_selected_key == &quot;multiple&quot; || input$opt_selected_key == &quot;single&quot;) { result[[length(result) + 1]] &lt;- StateHandlerUI( &quot;selected_key&quot;, label = &quot;Selected legend key elements:&quot;, choices = list(&quot;legend.title&quot;, &quot;Biden&quot;, &quot;Trump&quot;) ) } if (input$opt_hover_key == TRUE) { result[[length(result) + 1]] &lt;- StateHandlerUI( &quot;hovered_key&quot;, label = &quot;Hovered legend key elements:&quot;, choices = list(&quot;legend.title&quot;, &quot;Biden&quot;, &quot;Trump&quot;) ) } if (input$opt_selected_theme == &quot;multiple&quot; || input$opt_selected_theme == &quot;single&quot;) { result[[length(result) + 1]] &lt;- StateHandlerUI( &quot;selected_theme&quot;, label = &quot;Selected theme elements:&quot;, choices = list(&quot;title&quot;, &quot;subtitle&quot;) ) } if (input$opt_hover_theme == TRUE) { result[[length(result) + 1]] &lt;- StateHandlerUI( &quot;hovered_theme&quot;, label = &quot;Hovered theme elements:&quot;, choices = list(&quot;title&quot;, &quot;subtitle&quot;) ) } result }) link_selection_default &lt;- FALSE link_hover_default &lt;- FALSE output$linkoptions &lt;- renderUI({ result &lt;- list() linkSelection &lt;- (input$opt_selected_data == &quot;multiple&quot; || input$opt_selected_data == &quot;single&quot;) &amp;&amp; (input$opt_selected_key == &quot;multiple&quot; || input$opt_selected_key == &quot;single&quot;) linkHover &lt;- (input$opt_hover_data == TRUE) &amp;&amp; (input$opt_hover_key == TRUE) if (linkSelection || linkHover) { result &lt;- tagList( column( width = 4, if (linkSelection) checkboxInput( &quot;link_selection&quot;, label = &quot;Selecting legend key, selects relevant data&quot;, value = link_selection_default ) else div() ), column( width = 4, if (linkHover) checkboxInput( &quot;link_hover&quot;, label = &quot;Hovering legend key, highlights relevant data&quot;, value = link_hover_default ) else div() ) ) } result }) callModule(StateHandler, &#39;selected_data&#39;, reactive(input$plot_selected), &#39;plot_set&#39;) callModule(StateHandler, &#39;hovered_data&#39;, reactive(input$plot_hovered), &#39;plot_hovered_set&#39;) callModule(StateHandler, &#39;selected_key&#39;, reactive(input$plot_key_selected), &#39;plot_key_set&#39;) callModule( StateHandler, &#39;hovered_key&#39;, reactive(input$plot_key_hovered), &#39;plot_key_hovered_set&#39; ) callModule( StateHandler, &#39;selected_theme&#39;, reactive(input$plot_theme_selected), &#39;plot_theme_set&#39; ) callModule( StateHandler, &#39;hovered_theme&#39;, reactive(input$plot_theme_hovered), &#39;plot_theme_hovered_set&#39; ) observeEvent(input$link_selection, { link_selection_default &lt;&lt;- input$link_selection }) observeEvent(input$link_hover, { link_hover_default &lt;&lt;- input$link_hover }) observeEvent(input$plot_key_selected, { enabled &lt;- isolate(input$link_selection) if (is.logical(enabled) &amp;&amp; enabled == TRUE) { v &lt;- input$plot_key_selected if (is.null(v)) { v &lt;- character(0) } data_sel &lt;- (dat %&gt;% dplyr::filter(gender %in% v ))$name session$sendCustomMessage(type = &#39;plot_set&#39;, message = data_sel) } }, ignoreInit = TRUE, ignoreNULL = FALSE) observeEvent(input$plot_key_hovered, { enabled &lt;- isolate(input$link_hover) if (is.logical(enabled) &amp;&amp; enabled == TRUE) { v &lt;- input$plot_key_hovered if (is.null(v)) { v &lt;- character(0) } data_sel &lt;- (dat %&gt;% dplyr::filter(gender %in% v ))$name session$sendCustomMessage(type = &#39;plot_hovered_set&#39;, message = data_sel) } }, ignoreInit = TRUE, ignoreNULL = FALSE) }) stateHandler.R library(shiny) StateHandlerUI &lt;- function(id, label, choices) { ns &lt;- NS(id) checkboxGroupInput(inputId = ns(&quot;chk&quot;), label = label, choices = choices) } StateHandler &lt;- function(input, output, session, plotInput, messageId) { plot_data &lt;- reactive({ v &lt;- do.call(plotInput, list()) if (is.null(v)) { character(0) } else v }) chk_data &lt;- debounce(reactive({ if (is.null(input$chk)) { character(0) } else input$chk }), 200) ignore_plot_data &lt;- FALSE ignore_chk_data &lt;- FALSE observeEvent(plot_data(), { if (!ignore_plot_data) { # message(session$ns(&quot; &quot;), &quot;Updating check&quot;) ignore_chk_data &lt;&lt;- TRUE updateCheckboxGroupInput(session, &#39;chk&#39;, selected = plot_data()) } ignore_plot_data &lt;&lt;- FALSE }) observeEvent(chk_data(), { if (!ignore_plot_data) { # message(session$ns(&quot; &quot;), &quot;Updating plot&quot;) ignore_chk_data &lt;&lt;- TRUE session$sendCustomMessage(type = messageId, message = chk_data()) } ignore_chk_data &lt;&lt;- FALSE }) return(list(plot_data, chk_data)) } ui.R library(ggiraph) source(&quot;stateHandler.R&quot;) shinyUI(fluidPage( tags$h3(&quot;ggiraph selection/highlight demo&quot;), tags$hr(), fluidRow( column( width = 2, selectInput( &quot;opt_selected_data&quot;, label = &quot;Data selections:&quot;, choices = list(&quot;multiple&quot;, &quot;single&quot;, &quot;none&quot;), selected = &quot;multiple&quot; ) ), column( width = 2, checkboxInput( &quot;opt_hover_data&quot;, label = &quot;Reactive data hovering&quot;, value = FALSE ) ), column( width = 2, selectInput( &quot;opt_selected_key&quot;, label = &quot;Legend key selections:&quot;, choices = list(&quot;multiple&quot;, &quot;single&quot;, &quot;none&quot;), selected = &quot;single&quot; ) ), column( width = 2, checkboxInput( &quot;opt_hover_key&quot;, label = &quot;Reactive legend key hovering&quot;, value = FALSE ) ), column( width = 2, selectInput( &quot;opt_selected_theme&quot;, label = &quot;Theme elements selections:&quot;, choices = list(&quot;multiple&quot;, &quot;single&quot;, &quot;none&quot;), selected = &quot;single&quot; ) ), column( width = 2, checkboxInput( &quot;opt_hover_theme&quot;, label = &quot;Reactive theme element hovering&quot;, value = FALSE ) ) ), fluidRow( column( width = 4, checkboxInput( &quot;hover_inv&quot;, label = &quot;Hovering over one data element, makes the rest semi-transparent&quot;, value = FALSE ) ), uiOutput(&quot;linkoptions&quot;) ), tags$hr(), fluidRow(column(width = 8, girafeOutput(&quot;plot&quot;)), column(width = 4, uiOutput(&quot;checkboxes&quot;))) )) "]
]
