[
["index.html", "Data Programming Chapter 1 Prerequisites", " Data Programming Karl Ho 2019-05-30 Chapter 1 Prerequisites This course requires no prior experience in programming. Yet, if you have some programming experience (e.g. SPSS, Stata, HTML), it will be helpful. R, Python and JavaScript are all interpreted languages. In other words, the programs do not need compilation but will run in an environment to get the outputs. All packages and accounts are free and supported by open sources. It is recommended students bring their own computers (not mobile device) running MacOS, Linux or Windows operating systems. Recommended software and IDE’s: R version 3.6 (https://cran.r-project.org) RStudio version 1.2.x (https://www.rstudio.com) Anaconda 3 version 1.9.7 (https://www.anaconda.com)* Text editor of own choice (e.g. Atom, Sublime Text, Ultraedit) Recommended websites/accounts: GitHub (https://github.com) RStudio Cloud (*) – Python 3.x only. "],
["intro.html", "Chapter 2 Introduction 2.1 Principles of Programming 2.2 Functionalities of Data Programs", " Chapter 2 Introduction This chapter introduces the general principles for data programmng or coding involving data. Data programming is a practice that works and evolves with data. Unlike the point-and-click approach, programming allows the user to manage most closely the data and process data in more effective manner. Programs are designed to be replicable, by user and collaborators. A data program can be developed and updated iteratively and incrementally. In other words, it is building on the culminated works without repeating the steps. It takes debugging, which is the process of identifying problems (bugs) but, in fact, updating the program in different situations or with differnt inputs when used in different contexts, including the programmer himself or herself working in future times. 2.1 Principles of Programming Social scientists Gentzkow and Shapiro (2014) list out some principles for data programming. Automation For replicability (future-proof, for the future you) Version Control Allow evolution and updated edition Use Git and GitHub Directories/Modularity Organize by functions and data chunks Keys Index variable (relational) Abstraction KISS (Keep in short and simple) Documentation Comments for communicating to later users Management Collaboration ready 2.2 Functionalities of Data Programs A data program can provide or perform : Documentation of data Importing and exporting data Management of data Visualization of data Data models Sample R Programs: R basics # Create variables composed of random numbers x &lt;-rnorm(50) y = rnorm(x) # Plot the points in the plane plot(x, y) Using R packages # Plot better, using the ggplot2 package ## Prerequisite: install and load the ggplot2 package ## install.packages(&quot;ggplot2&quot;) library(ggplot2) qplot(x,y) More R Data Visualization # Plot better better with ggplot2 ggplot(,aes(x,y)) + theme_bw() + geom_point(col=&quot;blue&quot;) Sample Python Programs (## represents output) Python using Pandas # Import a text file in csv format import pandas as pd CO2 = pd.read_csv(&quot;https://raw.githubusercontent.com/kho777/data-visualization/master/data/CO2.csv&quot;) # Take a glimpse of the data file CO2.head() ## country CO2 _kt CO2pc CO2percent ## 0 Australia 446,348 18.6 1.23% ## 1 United States 5,172,336 16.1 14.26% ## 2 Saudi Arabia 505,565 16.0 1.39% ## 3 Canada 555,401 15.5 1.53% ## 4 Russia 1,760,895 12.3 4.86% Python using Matplotlib # Using matplotlib to do a simple plot import matplotlib.pyplot as plt CO2pc=CO2[&quot;CO2pc&quot;] plt.plot(CO2pc) In the subsequent chapters, sample programs will be provided to illustrate how to code or program in different environments to perform data science functionalities. "],
["r-programming.html", "Chapter 3 R Programming 3.1 What is R? 3.2 Why R? 3.3 RStudio 3.4 Basic operations and object assignment 3.5 Illustration 3.6 Exercise 3.7 Recommended R Resources:", " Chapter 3 R Programming 3.1 What is R? The R statistical programming language is a free, open source package based on the S language developed by John Chambers. 3.1.1 Some history of R and S S was further developed into R by Robert Gentlemen (Canada) and Ross Ihaka (New Zealand) Figure 3.1: R Inventors Source: Nick Thieme. 2018. R Generation: 25 years of R 3.1.2 It is: Large, probably one of the largest based on the user-written add-ons/procedures Object-oriented Interactive Multiplatform: Windows, Mac, Linux According to John Chambers (2009), six facets of R: an interface to computational procedures of many kinds; interactive, hands-on in real time; functional in its model of programming; object-oriented, “everything is an object”; modular, built from standardized pieces; and, collaborative, a world-wide, open-source effort. Figure 3.2: Prominent R Developers Source: Nick Thieme. 2018. R Generation: 25 years of R 3.2 Why R? A programming platform environment Allow development of software/packages by users Currently, the CRAN package repository features over 14,000 available packages (as of May, 2019). Graphics!!! Scaleble and Portable Interface with other platform/langauges (e.g. C++, Python, JavaScript, Stan, SQL) Comparing R with other software? Figure 3.3: R Compared with other statistical programs/platforms Source: Oscar Torres-Reyna. 2010. Getting Started in R~Stata Notes on Exploring Data 3.3 RStudio RStudio is a user interface for the statistical programming software R. Object-based environment Window system Point and click operations Coding recommended Expansions and development a multi-functional Integrated Development Environment (IDE) Figure 3.4: RStudio screenshot 3.4 Basic operations and object assignment Arithmetic Operations: +, -, *, /, ^ are the standard arithmetic operators. Assignment To assign a value to a variable use “&lt;-” or “=”: ## Introduction to R sample program ## file: introR02.R ## Adapted from Venables, W.N., Smith, D.M. and Team, R.C., 2018. An Introduction to R, Version 3.5.1 (2018-07-02) # Clear any existing objects rm(list = ls()) # Generate x, y and w to demontrate linear models and plots. # Make x = (1,2,...,20). x &lt;- 1:20 # Create A ‘weight’ vector of standard deviations. w &lt;- 1 + sqrt(x)/2 # Create a data frame of two columns, x and y. dummy &lt;- data.frame(x=x, y= x + rnorm(x)*w) # Fit a simple linear regression # With y to the left of the tilde then x, meaning y being dependent on x. # Unlike other statistical packages, R does not display all output. It is recommended # to create an object to store the estimates. fm &lt;- lm(y ~ x, data=dummy) # Display the summary of the output of model fm. summary(fm) ## ## Call: ## lm(formula = y ~ x, data = dummy) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.4741 -2.0033 0.5005 1.9943 5.5000 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.5724 1.4591 -1.078 0.295 ## x 1.0912 0.1218 8.959 4.72e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.141 on 18 degrees of freedom ## Multiple R-squared: 0.8168, Adjusted R-squared: 0.8066 ## F-statistic: 80.26 on 1 and 18 DF, p-value: 4.716e-08 # Use w for a weighted regression. fm1 &lt;- lm(y ~ x, data=dummy, weight=1/w^2) # Display the summary of the output of model fm1. summary(fm1) ## ## Call: ## lm(formula = y ~ x, data = dummy, weights = 1/w^2) ## ## Weighted Residuals: ## Min 1Q Median 3Q Max ## -2.7866 -0.8068 0.2128 0.8996 2.0073 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -1.677 1.138 -1.474 0.158 ## x 1.101 0.116 9.493 1.98e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.257 on 18 degrees of freedom ## Multiple R-squared: 0.8335, Adjusted R-squared: 0.8243 ## F-statistic: 90.12 on 1 and 18 DF, p-value: 1.977e-08 # Make the columns in the data frame visible as variables. attach(dummy) # Make a nonparametric local regression function. lrf &lt;- lowess(x, y) # Standard point plot, with plotting character (pch) as bullet. plot(x, y,pch=20) # Add in the local regression. lines(x, lrf$y) # The true regression line: (intercept 0, slope 1, with dotted line type ) abline(0, 1, lty=3) # Unweighted regression line. abline(coef(fm)) # Weighted regression line. abline(coef(fm1), col = &quot;red&quot;) # A standard regression diagnostic plot to check for heteroscedasticity. Can you see it? plot(fitted(fm), pch=20, resid(fm), xlab=&quot;Fitted values&quot;, ylab=&quot;Residuals&quot;, main=&quot;Residuals vs Fitted&quot;) # How about now? abline(0,0, col=&quot;red&quot;) # A normal scores plot to check for skewness, kurtosis and outliers. qqnorm(resid(fm), main=&quot;Residuals Rankit Plot&quot;, pch=17) # Cleaning up rm(list = ls()) 3.5 Illustration In this section, we demonstrate exploring data about Taiwan elections in 2016. The Taiwan Election and Democratization Study (TEDS) is one of the longest and most comprehensive elections studies starting in 2001. TEDS collects data through different modes of surveys including face-to-face interviews, telephone interviews and internet surveys. More detail of TEDS can be found at the National Chengchi University Election Study Center website at https://esc.nccu.edu.tw/main.php. Taiwan Election and Democratization Study 2016 data # Import the TEDS 2016 data in Stata format using the haven package ## install.packages(&quot;haven&quot;) library(haven) TEDS_2016 &lt;- read_stata(&quot;https://github.com/datageneration/home/blob/master/DataProgramming/data/TEDS_2016.dta?raw=true&quot;) # Prepare the analyze the Party ID variable # Assign label to the values (1=KMT, 2=DPP, 3=NP, 4=PFP, 5=TSU, 6=NPP, 7=&quot;NA&quot;) TEDS_2016$PartyID &lt;- factor(TEDS_2016$PartyID, labels=c(&quot;KMT&quot;,&quot;DPP&quot;,&quot;NP&quot;,&quot;PFP&quot;, &quot;TSU&quot;, &quot;NPP&quot;,&quot;NA&quot;)) Take a look at the variable: # Check the variable attach(TEDS_2016) head(PartyID) ## [1] NA NA KMT NA NA DPP ## Levels: KMT DPP NP PFP TSU NPP NA tail(PartyID) ## [1] NA NA DPP NA NA NA ## Levels: KMT DPP NP PFP TSU NPP NA Frequency table: # Run a frequency table of the Party ID variable using the descr package ## install.packages(&quot;descr&quot;) library(descr) freq(TEDS_2016$PartyID) ## TEDS_2016$PartyID ## Frequency Percent ## KMT 388 22.9586 ## DPP 591 34.9704 ## NP 3 0.1775 ## PFP 32 1.8935 ## TSU 5 0.2959 ## NPP 43 2.5444 ## NA 628 37.1598 ## Total 1690 100.0000 Get a better chart of the Party ID variable: # Plot the Party ID variable ggplot(TEDS_2016, aes(PartyID)) + geom_bar() We can attend to more detail of the chart, such as adding labels to x and y axes, and calculating the percentage instead of counts. ggplot(TEDS_2016, aes(PartyID)) + geom_bar(aes(y = (..count..)/sum(..count..))) + scale_y_continuous(labels=scales::percent) + ylab(&quot;Party Support (%)&quot;) + xlab(&quot;Taiwan Political Parties&quot;) Adding colors, with another theme: ggplot(TEDS_2016, aes(PartyID)) + geom_bar(aes(y = (..count..)/sum(..count..),fill=PartyID)) + scale_y_continuous(labels=scales::percent) + ylab(&quot;Party Support (%)&quot;) + xlab(&quot;Taiwan Political Parties&quot;) + theme_bw() Hold on, colors are not right! ggplot(TEDS_2016, aes(PartyID)) + geom_bar(aes(y = (..count..)/sum(..count..),fill=PartyID)) + scale_y_continuous(labels=scales::percent) + ylab(&quot;Party Support (%)&quot;) + xlab(&quot;Taiwan Political Parties&quot;) + theme_bw() + scale_fill_manual(values=c(&quot;steel blue&quot;,&quot;forestgreen&quot;,&quot;khaki1&quot;,&quot;orange&quot;,&quot;goldenrod&quot;,&quot;yellow&quot;,&quot;grey&quot;)) To make the chart more meaningful, we can use a package called tidyverse to manage the data. ##install.packages(&quot;tidyverse&quot;) library(tidyverse) TEDS_2016 %&gt;% count(PartyID) %&gt;% mutate(perc = n / nrow(TEDS_2016)) -&gt; T2 ggplot(T2, aes(x = reorder(PartyID, -perc),y = perc,fill=PartyID)) + geom_bar(stat = &quot;identity&quot;) + ylab(&quot;Party Support (%)&quot;) + xlab(&quot;Taiwan Political Parties&quot;) + theme_bw() + scale_fill_manual(values=c(&quot;steel blue&quot;,&quot;forestgreen&quot;,&quot;khaki1&quot;,&quot;orange&quot;,&quot;goldenrod&quot;,&quot;yellow&quot;,&quot;grey&quot;)) 3.6 Exercise Analyze the Tondu (統獨）variable using the following procedures: Assign label to each category Run a frequency table using descr Plot the variable using ggplot2 Hint: Prepare the analyze the Tondu variable using these labesl: (“Unification now”,“Status quo, unif. in future”,“Status quo, decide later”,“Status quo forever”, “Status quo, indep. in future”, “Independence now”,“No response”) Sample codes: TEDS_2016$Tondu&lt;-factor(TEDS_2016$Tondu,labels=c(&quot;Unification now&quot;,&quot;Status quo, unif. in &gt;future&quot;,&quot;Status quo, decide later&quot;,&quot;Status quo forever&quot;, &gt;&quot;Status quo, indep. in future&quot;, &quot;Independence now&quot;,&quot;No &gt;response&quot;)) 3.7 Recommended R Resources: The R Journal Introduction to R by W. N. Venables, D. M. Smith and the R Core Team Introduction to R Seminar at UCLA Getting Started in Data Analysis using Stata and R by Data and Statistical Services, Princeton University "],
["python-programming.html", "Chapter 4 Python Programming 4.1 What is Python? 4.2 Python basic packges: 4.3 Python IDE 4.4 Basic operations and object assignment 4.5 Exercise 4.6 Recommended Python Resources:", " Chapter 4 Python Programming 4.1 What is Python? Interpreted, high level computer language Invented by Dutch programmer Guido van Rossum Named after the TV Show Monty Python’s Flying Circus Open sourced programming language Figure 4.1: Python Inventor Guido van Rossum 4.1.1 Why Python? Simplicity Large ecosystem of domain-specific tools to facilitate scientific - computing and data science User-built packages Data management Web data Data munging 4.2 Python basic packges: NumPy - manipulation of homogeneous array-based data Pandas - manipulation of heterogeneous and labeled data SciPy - for common scientific computing tasks Matplotlib - data visualizations IPython - interactive execution and sharing of code using Jupyter notebook Scikit-Learn - machine learning 4.3 Python IDE Choice of Integrated Desktop Environment matters! There are plenty of IDE available for python programming and developments. To name a few: IDLE Pycharm Jupyter Notebook Spyder Rodeo R Studio 4.4 Basic operations and object assignment # Python example program 0 # Some basics # Print a one-line message print (&quot;Hello NCHU 中興大學 friends!!&quot;) # Create some variables ## Hello NCHU 中興大學 friends!! x=5 y=3 # Perform some mathematical operations x*y ## 15 x**y ## 125 x%y ## 2 4.4.1 Import libraries #Import Python Libraries import numpy as np import scipy as sp import pandas as pd import matplotlib as mpl import seaborn as sns import pandas as pd import matplotlib.pyplot as plt import seaborn as sns 4.4.2 Import data # Import a text file in csv format import pandas as pd CO2 = pd.read_csv(&quot;https://raw.githubusercontent.com/kho777/data-visualization/master/data/CO2.csv&quot;) # Take a glimpse of the data file CO2.head() ## country CO2 _kt CO2pc CO2percent ## 0 Australia 446,348 18.6 1.23% ## 1 United States 5,172,336 16.1 14.26% ## 2 Saudi Arabia 505,565 16.0 1.39% ## 3 Canada 555,401 15.5 1.53% ## 4 Russia 1,760,895 12.3 4.86% 4.4.3 Simple plot # Creating variables xs = [1,3,5,7,9] ys = [x**2 for x in xs] # Simple plot plt.plot(xs, ys) xs = range(-100,100,10) x2 = [x**2 for x in xs] negx2 = [-x**2 for x in xs] # Combined plot plt.plot(xs, x2) plt.plot(xs, negx2) plt.xlabel(&quot;x&quot;) plt.ylabel(&quot;y&quot;) plt.ylim(-2000, 2000) ## (-2000, 2000) plt.axhline(0,color=&quot;red&quot;) # horiz line plt.axvline(0,color=&quot;green&quot;) # vert line plt.show() 4.4.4 Visualizing data import matplotlib.pyplot as plt x = np.linspace(0, 2, 100) plt.plot(x, x, label=&#39;linear&#39;,color=&quot;pink&quot;) plt.plot(x, x**2, label=&#39;quadratic&#39;) plt.plot(x, x**3, label=&#39;cubic&#39;) plt.xlabel(&#39;x&#39;,fontsize=12,fontweight=&#39;bold&#39;) plt.ylabel(&#39;y&#39;,fontsize=12,fontweight=&#39;bold&#39;) plt.title(&quot;Plotting functions: Linear, quadratic and cubic&quot;, fontsize=16,fontweight=&#39;bold&#39;) 4.5 Exercise This exercise is designed to run in class. Students are advised to install Anaconda 3 to own computer. Launch Jupyter Notebook from Anaconda On Applications pulldown menu, choose anaconda3 Run sample programs from class GitHub (https://github.com/datageneration/dataprogramming/) 4.6 Recommended Python Resources: A Whirlwind Tool of Python: Getting started Datacamp: Online training courses Matplotlib.org: Data visualization "],
["javascript.html", "Chapter 5 JavaScript 5.1 What is JavaScript? 5.2 What is D3?", " Chapter 5 JavaScript 5.1 What is JavaScript? Figure 5.1: JavaScript Inventor Brendan Eich JavaScript is not related to Java Created by Brendan Eich in 1995 Originally developed as a prototype language for web browser (Client-side). Now used in server-side (Node.js) as well. Not related to Java, just named similarly for marketing purpose. C style syntax but got inspiration from Functional programming for, while, continue, break, if/else, switch are similar to C operators (+,-,*,/,%) are also similar (except ==,!=,||) include function operations such as map, reduce, forEach. 5.1.1 JavaScript Data Types Data Types Numbers: 42, 3.14159 Logical: true, false Strings: “Hello”, ‘Taiwan’ null undefined* - undefined is not null! 5.1.2 JSON JavaScript Object Notation JavaScript as an XML alternative for storing data e.g. [{“Station”:“Alishan”,“Temperature”:14.5,“Precipitation”:812.4,“Humidity”:95,“Pressure”:762.5,“dayrain”:30},….] 5.2 What is D3? D3 stands for Data-Driven Documents. -d3.js (D3) is “a JavaScript library for manipulating documents based on data”. D3 can be used in conjunction with HTML and CSS (amongst others) to visualize data on a webpage. It’s an open framework. It embeds or includes data in scripts to create images in webpages. “With D3, designers selectively bind input data to arbitrary document elements, applying dynamic transforms to both generate and modify content.” —Bostock, Ogievetsky and Heer, 2011 5.2.1 D3 and web documents D3 is web-based, working with following components: HTML (Hypertext Markup Language) CSS (Cascade Style Sheet) JavaScript(js) SVG (Scalable Vector Graphics), interpreted graphic output All of the above can be coded using a text editor. Output needs a browser with JavaScript console 5.2.2 Sample D3 graphics Interactive Ladder Graph Figure 5.2: D3: Ladder graph Click here to access the online version Interactive Aster Graph Figure 5.3: D3: Aster graph Click here to access the online version Interactive Network Graph "],
["summary.html", "Chapter 6 Summary", " Chapter 6 Summary This manuscript provides brief notes and sample programs for the “Data Programming” course covering the basic programming for Data Science. The languages included in this volume are primarily R, Python and JavaScript. There will be more developments to add materials and sample programs to build this manuscript into a full-blown codebook for data science. More materials can be accessed at the GitHub: https://www.github.com/datageneration/dataprogramming/ "],
["references.html", "References", " References "]
]
